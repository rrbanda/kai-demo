{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"\ud83e\udde0 Run Konveyor AI in OpenShift Dev Spaces with VS Code Extension","text":"<p>This guide walks you through running Konveyor AI using OpenShift Dev Spaces with VS Code as an IDE. You'll analyze and modernize a real Java application using the Kai VS Code extension in a Red Hat Dev Spaces workspace.</p>"},{"location":"#prerequisites","title":"\ud83e\uddf0 Prerequisites","text":"<ul> <li>Access to an OpenShift cluster with Dev Spaces enabled</li> <li><code>podman</code> installed locally</li> <li>A Quay.io container registry account</li> <li>Kai <code>.vsix</code> file from Konveyor AI Releases</li> <li>OpenAI credentials to use GPT-4o or a similar LLM</li> </ul>"},{"location":"#step-1-build-the-custom-dev-spaces-image","title":"\ud83c\udfd7\ufe0f Step 1: Build the Custom Dev Spaces Image","text":"<p>Create a <code>Containerfile</code> (based on Red Hat UBI for Dev Spaces):</p> <pre><code># Use official Dev Spaces base \n#FROM registry.redhat.io/devspaces/udi-rhel9:3.18-2.1741779985\nFROM quay.io/devfile/universal-developer-image:ubi9-latest\n\nUSER root\n\n# Avoid flaky mirrors, timeouts, or zchunk checksum mismatches\nRUN echo \"fastestmirror=True\" &gt;&gt; /etc/dnf/dnf.conf &amp;&amp; \\\n    echo \"skip_if_unavailable=True\" &gt;&gt; /etc/dnf/dnf.conf &amp;&amp; \\\n    echo \"zchunk=False\" &gt;&gt; /etc/dnf/dnf.conf\n\n# Install dependencies required by Konveyor AI + typical tools\nRUN dnf clean all &amp;&amp; \\\n    dnf install -y --nobest --allowerasing \\\n        python3.12 python3.12-devel \\\n        java-17-openjdk-devel \\\n        nodejs maven \\\n        unzip git curl zsh \\\n        gcc make glibc-devel libffi-devel openssl-devel \\\n    &amp;&amp; dnf clean all\n\n# Add Kai extension from GitHub release\nRUN curl -L -o /konveyor.vsix https://github.com/konveyor/editor-extensions/releases/download/v0.0.13/konveyor-v0.0.13.vsix\nENV DEFAULT_EXTENSIONS=/konveyor.vsix\n\n\nENV DEFAULT_EXTENSIONS=/konveyor-v0.0.13.vsix    \n\nUSER user\n</code></pre>"},{"location":"#build-push","title":"\ud83d\udee0\ufe0f Build &amp; Push","text":"<pre><code>podman build -t quay.io/&lt;your-username&gt;/kai-devspaces:latest .\npodman push quay.io/&lt;your-username&gt;/kai-devspaces:latest\n</code></pre>"},{"location":"#step-2-create-devfileyaml","title":"\ud83d\udce6 Step 2: Create <code>devfile.yaml</code>","text":"<pre><code>schemaVersion: 2.2.0\nmetadata:\n  name: kai-devspaces\ncomponents:\n  - name: kai-dev-container\n    container:\n      image: quay.io/&lt;your-username&gt;/kai-devspaces:latest\n      memoryLimit: 8Gi\n</code></pre> <p>Launch a new Dev Spaces workspace using this <code>devfile.yaml</code>.</p> <p></p> <p></p> <p></p>"},{"location":"#step-3-clone-the-example-codebase","title":"\ud83d\udcc2 Step 3: Clone the Example Codebase","text":"<p>In your Dev Spaces terminal:</p> <pre><code>git clone https://github.com/rrbanda/coolstore.git\ncd coolstore\n</code></pre>"},{"location":"#step-4-configure-the-extension-specific-details","title":"\u2699\ufe0f Step 4: Configure the Extension specific details","text":""},{"location":"#ensure-vscodesettingsjson-includes","title":"Ensure <code>.vscode/settings.json</code> includes:","text":"<pre><code>{\n  \"konveyor.analysis.useDefaultRulesets\": true,\n  \"konveyor.analysis.labelSelector\": \"(konveyor.io/target=jakarta-ee || konveyor.io/target=openjdk11 || konveyor.io/target=openjdk17) || (discovery)\"\n}\n</code></pre>"},{"location":"#confgure-the-llm","title":"Confgure the LLM","text":""},{"location":"#configure-source-and-target-dependencies","title":"Configure source and target dependencies","text":"<p>https://github.com/user-attachments/assets/3e498252-f620-4985-bac7-e22b17819ec6</p>"},{"location":"#step-5-run-the-analysis","title":"\ud83d\ude80 Step 5: Run the Analysis","text":"<ol> <li>Open the Command Palette (<code>Cmd+Shift+P</code> or <code>Ctrl+Shift+P</code>)</li> <li>Run: Konveyor: Run Analysis</li> <li>Once the RPC server is initialized, navigate to the Konveyor Analysis View and run the analysis</li> </ol>"},{"location":"#view-and-filter-issues","title":"\ud83e\uddfe View and Filter Issues","text":"<p>The Konveyor Analysis View will list issues by file. Use the issue panel to filter and navigate easily:</p> <p></p> <p>Lost the panel? Use the Command Palette and reopen the view:</p> <p></p>"},{"location":"#apply-fixes","title":"\ud83d\udee0\ufe0f Apply Fixes","text":""},{"location":"#change-import-namespaces","title":"Change Import Namespaces","text":"<p>Search for a file like <code>InventoryEntity.java</code>, click the fix icon, and choose the effort level (Low/Medium/High):</p> <p></p> <p>Review the generated suggestion:</p> <p> </p> <p>Use the Diff view to inspect and accept:</p> <p></p>"},{"location":"#apply-advanced-fixes","title":"\ud83d\udcd0 Apply Advanced Fixes","text":""},{"location":"#modify-scope-cdi-beans","title":"Modify Scope (CDI Beans)","text":"<p>Fix files like <code>CatalogService.java</code>:</p> <p> </p>"},{"location":"#ejb-replacements","title":"EJB Replacements","text":"<p>For <code>ShippingService.java</code>:</p> <p></p>"},{"location":"#jms-to-smallrye","title":"JMS to SmallRye","text":"<p>Resolve JMS issues by selecting Medium effort:</p> <p> </p>"},{"location":"#agentic-workflow","title":"\ud83d\udca1 Agentic Workflow","text":"<p>Understand how Kai orchestrates fixes behind the scenes:</p> <pre><code>graph LR\n A[Validator] --&gt;\n B[TaskManager] --&gt; \n C{TaskRunners}\n   C --&gt;D[Analyzer Agent]--&gt;G\n   C --&gt;E[MavenCompiler Agent]--&gt;G\n   C --&gt;F[Maven Dependency Agent]--&gt;G\n G[Reflection Agent]-- Feedback Loop --&gt;A\n</code></pre> <ul> <li>Validator Generate tasks on detected issues. Re-evaluated after each change to the codebase</li> <li>Task Manager Queued by priority and passed to Task runners</li> <li>Task Runners Understand how to handle specific types and errors and orchestrates agents.</li> <li>Analyzer Agent Analyze migration issues and generate an LLM fix</li> <li>MavenCompiler Agent Check compilation after fix</li> <li>MavenDependency Agent Check dependencies after fix</li> <li>Reflection Agent callibrate the source in conjunction to other agents. </li> </ul>"},{"location":"#expected-behavior","title":"\u2705 Expected Behavior","text":"<ul> <li>Incident suggestions appear</li> <li>You can select effort level and apply changes</li> <li>Logs are saved in <code>.vscode/konveyor-logs/</code></li> <li>You can validate using:</li> </ul> <pre><code>mvn clean install &amp;&amp; mvn compile\n</code></pre>"},{"location":"#example-project-structure","title":"\ud83d\udcc1 Example Project Structure","text":"<pre><code>coolstore/\n\u251c\u2500\u2500 .vscode/\n\u2502   \u2514\u2500\u2500 settings.json\n\u251c\u2500\u2500 pom.xml\n\u251c\u2500\u2500 src/\n\u2514\u2500\u2500 ...\n</code></pre>"},{"location":"#references","title":"\ud83d\udcce References","text":"<ul> <li>\ud83d\udd17 Konveyor AI Editor Extension</li> <li>\ud83e\uddea Coolstore Demo App</li> <li>\ud83e\udded Full Kai Migration Demo (JavaEE \u2192 Quarkus)</li> <li>\ud83d\udcac Join Konveyor on Slack</li> </ul> <p>```</p> <p>Let me know if you want this pushed into your GitHub repo or saved as a file.</p>"}]}